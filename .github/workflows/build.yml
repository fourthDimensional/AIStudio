name: Analyze, Build, and Deploy

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: Analysis and Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
    steps:
      # 1. Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # 2. Set up Python with the version specified in the matrix.
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.16

      # 3. Cache pip dependencies to speed up installation.
      # This caches the pip download cache (typically at ~/.cache/pip) based on a hash of your tox.ini.
      # If you have a requirements.txt or other dependency file, adjust the hashFiles accordingly.
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('tox.ini') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. Install tox (and any other required packages) using pip.
      - name: Install tox and any other packages
        run: pip install tox

      # 5. Run tox to execute tests in the configured environment.
      - name: Run tox
        uses: lsst-sqre/run-tox@v1
        with:
          tox-envs: "py"
          python-version: 3.10.16
          use-cache: true

      - name: Surface failing tests
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          # A list of JUnit XML files, directories containing the former, and wildcard
          # patterns to process.
          # See @actions/glob for supported patterns.
          path: report.xml

          # (Optional) Add a summary of the results at the top of the report
          summary: true

          # (Optional) Title of the test results section in the workflow summary
          title: Test results

      # 6. Run the SonarQube scan.
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 7. Wait for the quality gate result.
      - name: Check SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: sonarqube
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      # 1. Checkout the repository code.
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx for building multi-platform images.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Restore Docker layer cache to speed up image builds.
      - name: Restore Docker cache
        uses: actions/cache@v4.1.1
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # 4. Log in to the container registry.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 5. Extract metadata (tags, labels) for the Docker image.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha

      # 6. Build and push a multi-platform Docker image.
      - name: Build and push multi-platform Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          platforms: linux/amd64,linux/arm64  # Specify target platforms.
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha   # Use the GitHub Actions cache for faster builds.
          cache-to: type=gha,mode=max  # Store cache in GitHub Actions with maximum scope.

      # 7. Generate an artifact attestation for the built image.
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
